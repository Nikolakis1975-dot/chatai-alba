const express = require('express');
const router = express.Router();
// ‚úÖ SHTO K√ãT√ã LINJ√ã Q√ã MUNGTON:
const db = require('../database');
const ConversationContext = require('../models/ConversationContext');
const contextMemoryService = require('../services/contextMemoryService');
const voiceContextService = require('../services/voiceContextService');
const semanticSearchService = require('../services/semanticSearchService');

console.log('‚úÖ Context Routes u ngarkuan me sukses');

// ‚úÖ MIDDLEWARE P√ãR SESSION FALLBACK
router.use((req, res, next) => {
    // Krijo sessionId n√´se nuk ekziston
    if (req.body && !req.body.sessionId && req.body.userId) {
        req.body.sessionId = `user-${req.body.userId}-default`;
    }
    if (req.query && !req.query.sessionId && req.query.userId) {
        req.query.sessionId = `user-${req.query.userId}-default`;
    }
    next();
});

// ‚úÖ MARR SUMMARY T√ã KONTEKSTIT
router.get('/summary', async (req, res) => {
    try {
        const { userId, sessionId } = req.query;
        
        console.log(`üìä Duke marr√´ summary t√´ kontekstit p√´r ${userId}, ${sessionId}`);

        if (!userId || !sessionId) {
            return res.status(400).json({
                success: false,
                message: 'userId dhe sessionId jan√´ t√´ detyruesh√´m'
            });
        }

        const summary = await contextMemoryService.getContextSummary(userId, sessionId);
        
        res.json({
            success: true,
            summary: summary
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ marrjen e summary:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ marrjen e summary t√´ kontekstit'
        });
    }
});

// ‚úÖ KRIJO CONTEXT PROMPT P√ãR AI
router.post('/create-prompt', async (req, res) => {
    try {
        const { userId, sessionId, message } = req.body;
        
        console.log(`üß† Duke krijuar prompt p√´r ${userId}, session: ${sessionId}`);

        if (!userId || !message) {
            return res.status(400).json({
                success: false,
                message: 'userId dhe message jan√´ t√´ detyruesh√´m'
            });
        }

        // Krijo ose p√´rdit√´so kontekstin
        const context = await contextMemoryService.createOrUpdateContext(
            userId, 
            sessionId, 
            message
        );

        res.json({
            success: true,
            context: context,
            message: 'Konteksti u krijua me sukses'
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ krijimin e prompt:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ krijimin e kontekstit'
        });
    }
});

// ‚úÖ UPDATE KONTEKSTIN
router.post('/update', async (req, res) => {
    try {
        const { userId, sessionId, userMessage, assistantResponse, messageType } = req.body;
        
        console.log(`üîÑ Duke p√´rdit√´suar kontekst p√´r ${userId}, session: ${sessionId}`);

        if (!userId || !sessionId) {
            return res.status(400).json({
                success: false,
                message: 'userId dhe sessionId jan√´ t√´ detyruesh√´m'
            });
        }

        const updated = await contextMemoryService.updateContext(
            userId,
            sessionId,
            userMessage,
            assistantResponse,
            messageType
        );

        res.json({
            success: true,
            updated: updated,
            message: 'Konteksti u p√´rdit√´sua me sukses'
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ p√´rdit√´simin e kontekstit:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ p√´rdit√´simin e kontekstit'
        });
    }
});

// ‚úÖ LISTO T√ã GJITHA SESIONET P√ãR NJ√ã USER
router.get('/sessions', async (req, res) => {
    try {
        const { userId } = req.query;
        
        console.log(`üìä Duke k√´rkuar sesione p√´r user: ${userId}`);
        
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'userId √´sht√´ i detyruesh√´m'
            });
        }

        // K√´rko t√´ gjitha sessionet p√´r k√´t√´ user
        const sessions = await ConversationContext.findAllByUserId(userId);
        
        console.log(`‚úÖ Gjetur ${sessions.length} sesione p√´r ${userId}`);
        
        res.json({
            success: true,
            userId: userId,
            sessionCount: sessions.length,
            sessions: sessions
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ marrjen e sesioneve:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ marrjen e sesioneve'
        });
    }
});

// ‚úÖ K√ãRKIM SEMANTIK N√ã HISTORI
router.post('/semantic-search', async (req, res) => {
    try {
        const { userId, query } = req.body;
        
        console.log(`üîç Duke kryer k√´rkim semantik p√´r ${userId}: ${query}`);

        if (!userId || !query) {
            return res.status(400).json({
                success: false,
                message: 'userId dhe query jan√´ t√´ detyruesh√´m'
            });
        }

        const results = await semanticSearchService.searchConversations(userId, query);
        
        res.json({
            success: true,
            query: query,
            results: results
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ k√´rkim semantik:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ k√´rkim semantik'
        });
    }
});

// ‚úÖ MARR PREFERENCAT E P√ãRDOUESIT
router.get('/preferences', async (req, res) => {
    try {
        const { userId } = req.query;
        
        console.log(`üéØ Duke marr√´ preferencat p√´r ${userId}`);

        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'userId √´sht√´ i detyruesh√´m'
            });
        }

        const preferences = await contextMemoryService.getUserPreferences(userId);
        
        res.json({
            success: true,
            preferences: preferences
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ marrjen e preferencave:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ marrjen e preferencave'
        });
    }
});

// ‚úÖ FSHI SESIONET E VJETERA

// ‚úÖ ENDPOINT I RI I THJESHT√ã - FSHI T√ã GJITHA P√ãR USER
router.delete('/nuclear-cleanup', async (req, res) => {
    try {
        const { userId } = req.query;
        
        console.log(`üí• NUKLEARE: Duke fshir√´ T√ã GJITHA sesionet p√´r ${userId}`);
        
        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'userId √´sht√´ i detyruesh√´m'
            });
        }

        // QUERY I THJESHT√ã - FSHI T√ã GJITHA
        db.run(
            'DELETE FROM conversation_contexts WHERE user_id = ?',
            [userId],
            function(err) {
                if (err) {
                    console.error('‚ùå Gabim n√´ fshirje:', err);
                    return res.status(500).json({
                        success: false,
                        message: 'Gabim n√´ fshirje: ' + err.message
                    });
                }

                const deletedCount = this.changes;
                console.log(`üí• U FSHIN√ã ${deletedCount} SESIONE P√ãR USER ${userId}`);

                res.json({
                    success: true,
                    message: `U fshin√´ ${deletedCount} sesione`,
                    deletedCount: deletedCount
                });
            }
        );

    } catch (error) {
        console.error('‚ùå Gabim:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim: ' + error.message
        });
    }
});
// ‚úÖ MARR VOICE PROFILE
router.get('/voice-profile', async (req, res) => {
    try {
        const { userId } = req.query;
        
        console.log(`üé§ Duke marr√´ voice profile p√´r ${userId}`);

        if (!userId) {
            return res.status(400).json({
                success: false,
                message: 'userId √´sht√´ i detyruesh√´m'
            });
        }

        const voiceProfile = await voiceContextService.getVoiceProfile(userId);
        
        res.json({
            success: true,
            voiceProfile: voiceProfile
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ marrjen e voice profile:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ marrjen e voice profile'
        });
    }
});

// ‚úÖ HEALTH CHECK
router.get('/health', async (req, res) => {
    try {
        res.json({
            success: true,
            message: 'Context Memory API √´sht√´ operative',
            timestamp: new Date().toISOString(),
            endpoints: [
                'GET /summary',
                'POST /create-prompt', 
                'POST /update',
                'GET /sessions',
                'POST /semantic-search',
                'GET /preferences',
                'DELETE /cleanup',
                'GET /voice-profile'
            ]
        });
    } catch (error) {
        console.error('‚ùå Gabim n√´ health check:', error);
        res.status(500).json({
            success: false,
            message: 'Gabim n√´ health check'
        });
    }
});

module.exports = router;
