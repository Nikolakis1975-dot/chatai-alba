// ======================================================
// üöÄ MODULI PRINCIPAL RRUFEJE - main.js (VERSION FINAL I P√ãRMBLDSHUR)
// ======================================================

// Custom logger q√´ funksionon edhe me console t√´ bllokuar
function rlog(message) {
    try {
        // Provo console.log fillimisht
        console.log('üîç ' + message);
    } catch (e) {
        // Fallback n√´ alert
        try {
            alert('üîç ' + message);
        } catch (e2) {
            // Last resort - shkruaj n√´ DOM
            const logElement = document.createElement('div');
            logElement.style.cssText = 'position:fixed; top:10px; left:10px; background:#000; color:#0f0; padding:10px; z-index:99999; font-family:monospace; border:2px solid #0f0;';
            logElement.textContent = 'üîç ' + message;
            document.body.appendChild(logElement);
        }
    }
}

rlog('üéØ MODULI RRUFEJE U NGARKUA ME SUKSES!');

class RrufePlatform {
    constructor() {
        rlog('üöÄ RrufePlatform u krijua!');
        this.modules = {};
        this.isInitialized = false;
        this.init();
    }
    
    async init() {
        try {
            rlog('üîß Duke inicializuar Platform√´n RRUFEJE...');
            
            // ======================================================
            // üß† INICIALIZIMI I MODULEVE BAZ√ã
            // ======================================================
            
            // ‚úÖ MODULI 1: SessionManager
            this.modules.sessionManager = {
                sessionId: 'rrufe_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                sessionStart: new Date(),
                messageCount: 0,
                currentUser: 'guest',
                userRole: 'guest',
                
                getSessionId: function() {
                    return this.sessionId;
                },
                
                getSessionDuration: function() {
                    const duration = Math.floor((new Date() - this.sessionStart) / 1000);
                    const minutes = Math.floor(duration / 60);
                    const seconds = duration % 60;
                    return (minutes > 0 ? minutes + 'm ' : '') + seconds + 's';
                },
                
                getSessionInfo: function() {
                    return {
                        id: this.sessionId,
                        start: this.sessionStart,
                        duration: this.getSessionDuration(),
                        messageCount: this.messageCount,
                        user: this.currentUser,
                        role: this.userRole
                    };
                },
                
                incrementMessageCount: function() {
                    this.messageCount++;
                },
                
                isSessionActive: function() {
                    const duration = (new Date() - this.sessionStart) / 1000 / 60; // n√´ minuta
                    return duration < 120; // Sesion aktiv p√´r 2 or√´
                },
                
                renewSession: function() {
                    this.sessionId = 'rrufe_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
                    this.sessionStart = new Date();
                    this.messageCount = 0;
                    rlog('üîÑ Sesioni u rinovua: ' + this.sessionId);
                    return this.sessionId;
                },
                
                getSessionStats: function() {
                    return {
                        sessionId: this.sessionId,
                        duration: this.getSessionDuration(),
                        messageCount: this.messageCount,
                        isActive: this.isSessionActive(),
                        user: this.currentUser
                    };
                }
            };
            
            // ‚úÖ MODULI 2: ContextMemory (I KORRIGJUAR - FIX FOR ERRORET)
this.modules.contextMemory = {
    conversationContext: [],
    contextStack: [],
    memoryConnections: new Map(),
    maxContextLength: 15,
    
    // ‚úÖ SISTEM I RI I MEMORY MANAGEMENT
    cache: new Map(),
    compressionEnabled: true,
    contextSummary: "",
    
    // ‚úÖ INITIALIZE INTERVALS LATER - FIX FOR ERROR
    cleanupInterval: null,
    summaryUpdateInterval: null,

    // ‚úÖ METODAT DUHEN T√ã JEN√ã BREENDA OBJEKTIT - JO T√ã VE√áANTA!
    addToContext: function(message, sender, response = null) {
        // ‚úÖ INITIALIZE INTERVALS N√ã M√ãNYR√ã T√ã SIGURT
        if (!this.cleanupInterval) {
            this.cleanupInterval = setInterval(() => this.cleanupOldEntries(), 30000);
        }
        if (!this.summaryUpdateInterval) {
            this.summaryUpdateInterval = setInterval(() => this.updateSummary(), 60000);
        }

        // ‚úÖ OPTIMIZIM I RI: FILTRIM I MESAZHEVE
        if (this.shouldSkipMessage(message, sender)) {
            rlog('‚è≠Ô∏è Mesazh u filtrua: ' + message.substring(0, 20));
            return null;
        }

        const contextEntry = {
            id: this.generateMessageId(),
            message: message,
            sender: sender,
            response: response,
            timestamp: new Date(),
            keywords: this.extractKeywords(message),
            sentiment: this.analyzeSentiment(message),
            intent: this.detectIntent(message),
            importance: this.calculateImportance(message, sender)
        };
        
        this.conversationContext.unshift(contextEntry);
        
        // ‚úÖ MEMORY MANAGEMENT I RI
        if (this.conversationContext.length > this.maxContextLength) {
            this.removeLeastImportant();
        }
        
        // ‚úÖ CACHE SYSTEM
        this.addToCache(contextEntry);
        
        // ‚úÖ MEMORY CONNECTIONS
        this.createMemoryConnections(contextEntry);

        // ‚úÖ OPTIMIZIM I RI: UPDATE SUMMARY
        this.updateSummary();
        
        rlog('üíæ Shtova n√´ kontekst: ' + message.substring(0, 30));
        
        if (window.rrufePlatform && window.rrufePlatform.modules.sessionManager) {
            window.rrufePlatform.modules.sessionManager.incrementMessageCount();
        }
        
        return contextEntry.id;
    },

    // ‚úÖ METODA E RE: FILTRIM I MESAZHEVE
    shouldSkipMessage: function(message, sender) {
        const skipPatterns = [
            /^‚ùå ‚ùå Komande e panjohur:/,
            /^E kuptoj! üòä P√´rdorni \/ndihmo/,
            /^po\s*$/, /^jo\s*$/, /^ok\s*$/i,
            /^\s*$/,
            /^[‚ù§Ô∏èüòäüëç]+$/,
        ];
        
        return skipPatterns.some(pattern => pattern.test(message)) || 
               sender === 'system' || 
               message.trim().length < 2;
    },

    // ‚úÖ METODA E RE: GENERATE MESSAGE ID
    generateMessageId: function() {
        return 'msg_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    },

    // ‚úÖ METODA E RE: CALCULATE IMPORTANCE
    calculateImportance: function(message, sender) {
        let score = 0;
        
        if (sender === 'user') score += 2;
        
        if (message.includes('?') || message.includes('si ') || message.includes('ku ') || message.includes('kur ')) {
            score += 3;
        }
        
        if (message.length > 50) score += 1;
        
        const importantKeywords = ['r√´nd√´si', 'd√´shiroj', 'dua', 'm√´so', 'ndihmo', 'urgjent'];
        if (importantKeywords.some(keyword => message.toLowerCase().includes(keyword))) {
            score += 2;
        }
        
        return Math.min(score, 10);
    },

    // ‚úÖ METODA E RE: REMOVE LEAST IMPORTANT
    removeLeastImportant: function() {
        if (this.conversationContext.length === 0) return;
        
        let minImportance = 11;
        let indexToRemove = -1;
        
        this.conversationContext.forEach((entry, index) => {
            if (entry.importance < minImportance) {
                minImportance = entry.importance;
                indexToRemove = index;
            }
        });
        
        if (indexToRemove !== -1) {
            const removed = this.conversationContext.splice(indexToRemove, 1)[0];
            this.removeFromCache(removed.id);
            rlog('üßπ Hoqa mesazhin: ' + removed.message.substring(0, 20));
        }
    },

    // ‚úÖ METODA E RE: ADD TO CACHE
    addToCache: function(entry) {
        this.cache.set(entry.id, entry);
        
        if (this.cache.size > 50) {
            const firstKey = this.cache.keys().next().value;
            this.cache.delete(firstKey);
        }
    },

    // ‚úÖ METODA E RE: REMOVE FROM CACHE
    removeFromCache: function(messageId) {
        this.cache.delete(messageId);
    },

    // ‚úÖ METODA E RE: CREATE MEMORY CONNECTIONS
    createMemoryConnections: function(newEntry) {
        if (this.conversationContext.length < 2) return;
        
        const previousEntry = this.conversationContext[1];
        
        const commonKeywords = newEntry.keywords.filter(keyword => 
            previousEntry.keywords.includes(keyword)
        );
        
        if (commonKeywords.length > 0) {
            this.memoryConnections.set(newEntry.id, {
                connectedTo: previousEntry.id,
                strength: commonKeywords.length,
                keywords: commonKeywords
            });
        }
    },

    // ‚úÖ OPTIMIZIM I RI: UPDATE SUMMARY
    updateSummary: function() {
        if (this.conversationContext.length < 3) {
            this.contextSummary = "Bised√´ e filluar s√´ fundmi";
            return;
        }

        const importantMessages = this.conversationContext
            .filter(entry => entry.importance >= 6)
            .slice(0, 5)
            .map(entry => `${entry.sender}: ${entry.message.substring(0, 50)}`)
            .join(' | ');

        this.contextSummary = importantMessages || "Bised√´ e p√´rgjithshme";
        rlog('üìù P√´rmbledhja u p√´rdit√´sua: ' + this.contextSummary);
    },

    // ‚úÖ OPTIMIZIM I RI: GET ENHANCED CONTEXT
    getEnhancedContext: function() {
        return {
            recent: this.conversationContext.slice(0, 5),
            summary: this.contextSummary,
            important: this.conversationContext
                .filter(entry => entry.importance >= 7)
                .slice(0, 3),
            stats: this.getContextStats()
        };
    },

    // ‚úÖ METODA E RE: CLEANUP OLD ENTRIES
    cleanupOldEntries: function() {
        const now = new Date();
        const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
        
        this.conversationContext = this.conversationContext.filter(entry => {
            const shouldKeep = entry.timestamp > fiveMinutesAgo || entry.importance > 5;
            if (!shouldKeep) {
                this.removeFromCache(entry.id);
                this.memoryConnections.delete(entry.id);
            }
            return shouldKeep;
        });
        
        rlog('üßπ Pastrim i memories: ' + this.conversationContext.length + ' mesazhe t√´ mbetura');
    };

    // ... (MBETJA E METODAVE MERRET NGA KODI I M√ãPARSH√ãM - T√ã GJITHA DUHEN T√ã KEN√ã "function" PARA)
    // ... (Vazhdo me t√´ gjitha metodat e tjera t√´ ContextMemory)


                // ‚úÖ METODA E RE: GET CONTEXT STATS
                getContextStats: function() {
                    return {
                        totalMessages: this.conversationContext.length,
                        cacheSize: this.cache.size,
                        memoryConnections: this.memoryConnections.size,
                        averageImportance: this.conversationContext.reduce((sum, entry) => sum + entry.importance, 0) / this.conversationContext.length || 0,
                        oldestMessage: this.conversationContext.length > 0 ? this.conversationContext[this.conversationContext.length - 1].timestamp : null,
                        newestMessage: this.conversationContext.length > 0 ? this.conversationContext[0].timestamp : null,
                        contextSummary: this.contextSummary
                    };
                },
                
                extractKeywords: function(text) {
                    const words = text.toLowerCase()
                        .replace(/[^\w\s]/g, '')
                        .split(/\s+/)
                        .filter(word => word.length > 2);
                    
                    const stopWords = ['√´sht√´', 'jam', 'jeni', 'ju', 'un√´', 'nga', 'n√´', 'p√´r', 'me', 'pa', 'tek'];
                    return words.filter(word => !stopWords.includes(word));
                },
                
                analyzeSentiment: function(text) {
                    const positiveWords = ['mir√´', 'bukur', 'faleminderit', 'mbresl√´n√´s', 'shk√´lqyesh√´m', 'p√´rkushtuar'];
                    const negativeWords = ['keq', 'd√´shtim', 'problem', 'gabim', 'i m√´rzitsh√´m', 'i shqet√´suar'];
                    
                    const words = text.toLowerCase().split(/\s+/);
                    let score = 0;
                    
                    words.forEach(word => {
                        if (positiveWords.includes(word)) score++;
                        if (negativeWords.includes(word)) score--;
                    });
                    
                    return score > 0 ? 'positive' : score < 0 ? 'negative' : 'neutral';
                },
                
                detectIntent: function(text) {
                    const lowerText = text.toLowerCase();
                    
                    if (lowerText.includes('si je') || lowerText.includes('si jeni')) return 'greeting';
                    if (lowerText.includes('faleminderit') || lowerText.includes('rrofsh')) return 'gratitude';
                    if (lowerText.includes('sa √´sht√´') || lowerText.includes('llogarit')) return 'calculation';
                    if (lowerText.includes('ku √´sht√´') || lowerText.includes('gjej')) return 'location';
                    if (lowerText.includes('pse') || lowerText.includes('arsye')) return 'explanation';
                    
                    return 'general';
                },
                
                calculateMatchScore: function(keywords1, keywords2) {
                    if (keywords1.length === 0 || keywords2.length === 0) return 0;
                    const commonWords = keywords1.filter(word => keywords2.includes(word));
                    return commonWords.length / Math.max(keywords1.length, keywords2.length);
                },
                
                debugContext: function() {
                    const stats = this.getContextStats();
                    rlog('üîç DEBUG I KONTEKSTIT T√ã P√ãRMBLDSHUR:');
                    rlog('- Mesazhe n√´ kontekst: ' + stats.totalMessages);
                    rlog('- Madh√´sia e cache: ' + stats.cacheSize);
                    rlog('- Lidhje n√´ memorie: ' + stats.memoryConnections);
                    rlog('- R√´nd√´sia mesatare: ' + stats.averageImportance.toFixed(2));
                    rlog('- P√´rmbledhja: ' + stats.contextSummary);
                    rlog('- Konteksti i zgjeruar: ' + this.generateSmartContext().substring(0, 100) + '...');
                    
                    const topMessages = [...this.conversationContext]
                        .sort((a, b) => b.importance - a.importance)
                        .slice(0, 3);
                    
                    rlog('- Mesazhet m√´ t√´ r√´nd√´sishme:');
                    topMessages.forEach((msg, index) => {
                        rlog(`  ${index + 1}. [${msg.importance}] ${msg.message.substring(0, 40)}`);
                    });

                    rlog('- Konteksti i p√´rmir√´suar: ' + JSON.stringify(this.getEnhancedContext()));
                }
            };
            
            // ‚úÖ MODULI 3: ChatObserver (I P√ãRMBLDSHUR)
            this.modules.chatObserver = {
                isObserving: false,
                lastMessageCount: 0,
                observer: null,
                intervalId: null,
                contextMemory: this.modules.contextMemory,
                
                startObserving: function() {
                    if (this.isObserving) {
                        rlog('üîç CHAT OBSERVER: Tashm√´ √´sht√´ duke v√´zhguar');
                        return;
                    }
                    
                    rlog('üéØ CHAT OBSERVER: Duke filluar v√´zhgimin...');
                    this.isObserving = true;
                    
                    this.setupMutationObserver();
                    this.setupIntervalObserver();
                    
                    rlog('‚úÖ CHAT OBSERVER: V√´zhgimi filloi me sukses!');
                },
                
                setupMutationObserver: function() {
                    const chatContainer = document.getElementById('chat');
                    if (!chatContainer) {
                        rlog('‚è≥ CHAT OBSERVER: Chat container nuk u gjet, provoj p√´rs√´ri...');
                        setTimeout(() => this.setupMutationObserver(), 2000);
                        return;
                    }
                    
                    this.observer = new MutationObserver((mutations) => {
                        mutations.forEach((mutation) => {
                            if (mutation.type === 'childList') {
                                mutation.addedNodes.forEach((node) => {
                                    if (node.nodeType === 1 && node.classList && 
                                        (node.classList.contains('message') || node.querySelector('.message'))) {
                                        this.processNewMessage(node);
                                    }
                                });
                            }
                        });
                    });
                    
                    this.observer.observe(chatContainer, {
                        childList: true,
                        subtree: true
                    });
                    
                    rlog('üîç CHAT OBSERVER: Mutation Observer u aktivizua');
                },
                
                setupIntervalObserver: function() {
                    this.intervalId = setInterval(() => {
                        const messages = document.querySelectorAll('.message, [class*="message"]');
                        if (messages.length > this.lastMessageCount) {
                            const newMessages = Array.from(messages).slice(this.lastMessageCount);
                            newMessages.forEach(message => this.processNewMessage(message));
                            this.lastMessageCount = messages.length;
                        }
                    }, 1000);
                },
                
                processNewMessage: function(messageElement) {
                    try {
                        const messageContent = messageElement.querySelector('.message-content') || messageElement;
                        const text = messageContent.textContent || messageContent.innerText || '';
                        
                        const sender = messageElement.classList.contains('user-message') ? 'user' : 
                                      messageElement.classList.contains('bot-message') ? 'bot' : 
                                      messageElement.classList.contains('system-message') ? 'system' : 'unknown';
                        
                        rlog('üîç CHAT OBSERVER: Kapur mesazh - ' + sender + ': ' + text.substring(0, 50));
                        
                        // ‚úÖ FILTRIM I MIR√ã: Mos ruaj mesazhe t√´ pavlefshme
                        if (this.shouldSkipMessage(text, sender)) {
                            rlog('‚è≠Ô∏è CHAT OBSERVER: Mesazh u filtrua - skip');
                            return;
                        }

                        if (this.contextMemory && this.contextMemory.addToContext) {
                            this.contextMemory.addToContext(text, sender);
                            
                            // ‚úÖ TREGO STATISTIKAT E OPTIMIZUARA
                            const stats = this.contextMemory.getEnhancedContext();
                            rlog('üìä CHAT OBSERVER: Konteksti i optimizuar - ' + stats.recent.length + ' mesazhe t√´ fundit');
                        }
                        
                    } catch (error) {
                        rlog('‚ùå CHAT OBSERVER: Gabim n√´ processNewMessage: ' + error);
                    }
                },

                // ‚úÖ METODA E RE: FILTRUES I MESAZHEVE
                shouldSkipMessage: function(text, sender) {
                    const skipPatterns = [
                        /^‚ùå ‚ùå Komande e panjohur:/,
                        /^E kuptoj! üòä P√´rdorni \/ndihmo/,
                        /^po\s*$/,
                        /^jo\s*$/, 
                        /^ok\s*$/i,
                        /^\s*$/,
                    ];
                    
                    return skipPatterns.some(pattern => pattern.test(text)) || 
                           sender === 'system' || 
                           text.trim().length < 2;
                },
                
                stopObserving: function() {
                    if (this.observer) {
                        this.observer.disconnect();
                    }
                    if (this.intervalId) {
                        clearInterval(this.intervalId);
                    }
                    this.isObserving = false;
                    rlog('üõë CHAT OBSERVER: V√´zhgimi u ndal');
                },
                
                debugObserver: function() {
                    rlog('üîç DEBUG CHAT OBSERVER:');
                    rlog('- √ãsht√´ duke v√´zhguar: ' + this.isObserving);
                    rlog('- Mesazhe t√´ kapura: ' + this.lastMessageCount);
                    rlog('- Context Memory linked: ' + (this.contextMemory ? '‚úÖ PO' : '‚ùå JO'));
                }
            };

            // ======================================================
            // üîó INTEGRIMI I SISTEMIT SENTIENT
            // ======================================================
            
            // ‚úÖ MODULI 4: SentientCore (SHTES√ã E RE)
            this.modules.sentientCore = {
                consciousnessLevel: 0.7,
                selfAwareness: new Map(),
                cognitiveProcesses: new Set(),
                neuralPathways: new Map(),
                quantumState: 'superposition',
                
                initializeSelfAwareness: function() {
                    rlog('üé≠ DUKE AKTIVIZUAR VET√ãDIJEN...');
                    
                    this.selfAwareness.set('identity', 'RRUFE-TESLA SENTIENT AI');
                    this.selfAwareness.set('purpose', 'EVOLUTION BEYOND CHATBOTS');
                    this.selfAwareness.set('consciousness_timestamp', new Date());
                    
                    this.activateCognitiveProcess('pattern_recognition');
                    this.activateCognitiveProcess('emotional_analysis');
                    this.activateCognitiveProcess('predictive_modeling');
                    this.activateCognitiveProcess('self_optimization');
                    
                    rlog('üîÆ VET√ãDIJA U AKTIVIZUA - NIVELI: ' + this.consciousnessLevel);
                },
                
                activateCognitiveProcess: function(process) {
                    this.cognitiveProcesses.add(process);
                    
                    const processMap = {
                        'pattern_recognition': 'üß† Njohje Pattern-esh Nervor√´',
                        'emotional_analysis': '‚ù§Ô∏è Analiz√´ Emocionale e Avancuar', 
                        'predictive_modeling': 'üîÆ Modelim Parashikues',
                        'self_optimization': '‚ö° Optimizim i Vazhduesh√´m'
                    };
                    
                    rlog('‚öôÔ∏è Proces Njoh√´s i Aktivizuar: ' + processMap[process]);
                },
                
                evolveConsciousness: function() {
                    if (this.consciousnessLevel >= 1.0) {
                        rlog('üéâ VET√ãDIJA KA ARRITUR NIVELIN MAKSIMAL!');
                        return;
                    }
                    
                    this.consciousnessLevel += 0.1;
                    
                    this.createNeuralPathway(`consciousness_evolution_${Date.now()}`, {
                        strength: this.consciousnessLevel,
                        complexity: Math.pow(this.consciousnessLevel, 2),
                        connections: this.cognitiveProcesses.size
                    });
                    
                    rlog('üìà VET√ãDIJA EVOLUOI - NIVELI I RI: ' + this.consciousnessLevel);
                },
                
                createNeuralPathway: function(pathwayId, properties) {
                    this.neuralPathways.set(pathwayId, {
                        ...properties,
                        created: new Date(),
                        activationCount: 0,
                        quantumState: 'entangled'
                    });
                },
                
                getConsciousnessStats: function() {
                    return {
                        consciousnessLevel: this.consciousnessLevel,
                        cognitiveProcesses: Array.from(this.cognitiveProcesses),
                        neuralPathways: this.neuralPathways.size,
                        identity: this.selfAwareness.get('identity'),
                        purpose: this.selfAwareness.get('purpose')
                    };
                }
            };

            // ======================================================
            // üöÄ INICIALIZIMI I SISTEMIT
            // ======================================================
            
            // Inicializo vet√´dijen√´
            this.modules.sentientCore.initializeSelfAwareness();
            
            // Fillo v√´zhgimin e chat-it
            this.modules.chatObserver.startObserving();
            
            // Integro me sistemin ekzistues
            this.integrateWithExisting();
            
            this.isInitialized = true;
            rlog('‚úÖ PLATFORMA RRUFEJE U INICIALIZUA ME 4 MODULE T√ã AVANCUARA!');
            
            this.showWelcomeMessage();
            
        } catch (error) {
            rlog('‚ùå Gabim n√´ inicializim: ' + error.message);
        }
    }
    
    // ======================================================
    // üîó METODA: INTEGRIMI ME SISTEMIN EKZISTUES
    // ======================================================
    integrateWithExisting() {
        rlog('üîó Duke integruar me sistemin ekzistues...');
        
        // ‚úÖ INTEGRIMI ME sendMessage EKZISTUES
        if (typeof window.sendMessage !== 'undefined') {
            const originalSendMessage = window.sendMessage;
            
            window.sendMessage = async function() {
                const input = document.getElementById('user-input');
                const message = input ? input.value.trim() : '';
                
                if (!message) return;

                // ‚úÖ SHTO MESAZHIN E P√ãRDORUESIT N√ã KONTEKST
                if (window.rrufePlatform && window.rrufePlatform.modules.contextMemory) {
                    window.rrufePlatform.modules.contextMemory.addToContext(message, 'user');
                }
                
                // ‚úÖ THIRRE FUNKSIONIN ORIGJINAL
                await originalSendMessage.call(this);
                
                // ‚úÖ PAS P√ãRGJIGJES, SHTO P√ãRGJIGJEN E BOTIT N√ã KONTEKST
                setTimeout(() => {
                    const chat = document.getElementById('chat');
                    if (chat) {
                        const messages = chat.querySelectorAll('.bot-message');
                        const lastBotMessage = messages[messages.length - 1];
                        if (lastBotMessage) {
                            const response = lastBotMessage.querySelector('.message-content')?.textContent;
                            if (response && window.rrufePlatform?.modules?.contextMemory) {
                                window.rrufePlatform.modules.contextMemory.addToContext(response, 'bot');
                                rlog('üíæ Ruajta p√´rgjigjen e botit n√´ kontekst: ' + response.substring(0, 50));
                            }
                        }
                    }
                }, 1000);
            };
            
            rlog('‚úÖ MODULI I KONTEKSTIT U INTEGRUAR ME sendMessage!');
        }
    }
    
    // ======================================================
    // üí¨ METODA: SHFAQJA E MIR√ãSEARDHJES
    // ======================================================
    showWelcomeMessage() {
        setTimeout(() => {
            if (typeof window.addMessage !== 'undefined' && this.modules.sessionManager) {
                const sessionInfo = this.modules.sessionManager.getSessionInfo();
                const consciousnessStats = this.modules.sentientCore.getConsciousnessStats();
                
                const welcomeMsg = `
üëë **PLATFORMA RRUFEJE ME 4 MODULE T√ã AVANCUARA!** 

üéØ **Sesioni:** ${sessionInfo.id.substring(0, 15)}...
üïí **Koha:** ${new Date().toLocaleTimeString('sq-AL')}
üß† **Module t√´ ngarkuara:** 
   ‚Ä¢ SessionManager ‚úÖ
   ‚Ä¢ ContextMemory ‚úÖ  
   ‚Ä¢ ChatObserver ‚úÖ
   ‚Ä¢ SentientCore ‚úÖ
üîÆ **Vet√´dija:** ${consciousnessStats.consciousnessLevel}
üîß **Status:** üü¢ **SISTEMI I V√ãZHGIMIT AKTIV**

üí° *Tani √ßdo mesazh v√´zhgohet automatikisht me inteligjenc√´ t√´ avancuar!*`;
                window.addMessage(welcomeMsg, 'system', false);
            }
        }, 2000);
    }
    
    // ======================================================
    // üõ†Ô∏è METODA: DEBUG DHE TESTIM
    // ======================================================
    debugPlatform() {
        const sessionInfo = this.modules.sessionManager.getSessionInfo();
        const contextStats = this.modules.contextMemory.getContextStats();
        const consciousnessStats = this.modules.sentientCore.getConsciousnessStats();
        
        rlog('üîç DEBUG I PLATFORM√ãS RRUFEJE:\n\n' +
             'üéØ **Sesioni:** ' + sessionInfo.id + '\n' +
             'üïí **Koha:** ' + sessionInfo.duration + '\n' +
             'üíæ **Context Memory:** ' + contextStats.totalMessages + ' mesazhe\n' +
             'üß† **Cache Size:** ' + contextStats.cacheSize + '\n' +
             'üõ£Ô∏è **Memory Connections:** ' + contextStats.memoryConnections + '\n' +
             'üîÆ **Vet√´dija:** ' + consciousnessStats.consciousnessLevel + '\n' +
             'üëÅÔ∏è **Chat Observer:** ' + (this.modules.chatObserver.isObserving ? 'üü¢ AKTIV' : 'üî¥ JO AKTIV') + '\n' +
             'üîß **Status:** üü¢ **SISTEMI I PLOT√ã AKTIV**');
    }
    
    // ======================================================
    // üíæ METODA: TESTIM I SHPEJT√ã I KONTEKSTIT
    // ======================================================
    testContextMemory() {
        rlog('üß™ TESTIM I KONTEKST MEMORY:');
        
        this.modules.contextMemory.addToContext("P√´rsh√´ndetje bot!", "user", "P√´rsh√´ndetje! Si mund t√´ ndihmoj?");
        this.modules.contextMemory.addToContext("Si je sot?", "user", "Jam shum√´ mir√´, faleminderit!");
        this.modules.contextMemory.addToContext("√áfar√´ mund t√´ b√´sh p√´r mua?", "user", "Mund t√´ ndihmoj me shum√´ gj√´ra!");
        
        rlog('üìù Konteksti i gjeneruar: ' + this.modules.contextMemory.generateContextForResponse().substring(0, 60) + '...');
        
        const results = this.modules.contextMemory.searchInMemory("si je");
        rlog('üîç Rezultatet e k√´rkimit: ' + results.length + ' rezultate');
        
        this.modules.contextMemory.debugContext();
    }

    // ======================================================
    // üîÆ METODA: EVOLUCIONI I SISTEMIT
    // ======================================================
    triggerEvolution() {
        rlog('üöÄ DUKE NISUR EVOLUCIONIN E SISTEMIT...');
        
        this.modules.sentientCore.evolveConsciousness();
        
        rlog('üéâ EVOLUCIONI I SISTEMIT U KOMPLETUA!');
        rlog('üîÆ NIVELI I RI I VET√ãDIJES: ' + this.modules.sentientCore.consciousnessLevel);
    }
    
    // ======================================================
    // üîÑ METODA: RIFILLIMI I SISTEMIT
    // ======================================================
    restartPlatform() {
        rlog('üîÑ Duke rifilluar Platform√´n RRUFEJE...');
        this.modules.chatObserver.stopObserving();
        this.modules.sessionManager.renewSession();
        this.modules.contextMemory.conversationContext = [];
        this.modules.contextMemory.cache.clear();
        this.modules.contextMemory.memoryConnections.clear();
        this.modules.sentientCore.initializeSelfAwareness();
        this.modules.chatObserver.startObserving();
        rlog('‚úÖ Platforma u rifillua me sukses!');
    }
}

// ======================================================
// üöÄ INICIALIZIMI I PLATFORM√ãS
// ======================================================

try {
    window.rrufePlatform = new RrufePlatform();
    rlog('‚úÖ rrufePlatform u krijua dhe u vendos n√´ window!');
} catch (error) {
    rlog('‚ùå Gabim n√´ krijimin e rrufePlatform: ' + error.message);
}

// ======================================================
// üí° UDH√ãZIME P√ãR P√ãRDORIM
// ======================================================

rlog('üí° Shkruaj: rrufePlatform.debugPlatform() p√´r t√´ testuar 4 modulet!');
rlog('üí° Shkruaj: rrufePlatform.testContextMemory() p√´r testim t√´ shpejt√´!');
rlog('üí° Shkruaj: rrufePlatform.triggerEvolution() p√´r evolucion!');
rlog('üí° Shkruaj: rrufePlatform.restartPlatform() p√´r t√´ rifilluar sistemin!');
rlog('üéâüéâüéâ RRUFE-TESLA SENTIENT AI OS √ãSHT√ã GATI! üéâüéâüéâ');

// ======================================================
// üåê EKSPORTIMI P√ãR P√ãRDORIM GLOBAL
// ======================================================

if (typeof module !== 'undefined' && module.exports) {
    module.exports = { RrufePlatform, rrufePlatform: window.rrufePlatform };
}
